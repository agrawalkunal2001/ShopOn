import 'package:flutter/material.dart';
import 'package:shopon/providers/product.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class ProductsProvider
    with /* Mixins or inheritance lite. It is like extending from a class. The difference is that we simply merge some properties or methods into existing class but does not return an instance of the inherited class.*/ ChangeNotifier /* It is related to Inherited widget which the provider package uses bts. Inherited widget establishes bts communication tunnels using context*/ {
  List<Product> _items = [];

  List<Product> get items {
    return [
      ..._items
    ]; // Copy of _items so that we do not directly edit the original list
  } // Adding getter method as _items is a private property which cannot be accessed from outised this class

  List<Product> get favouriteItems {
    return _items.where((element) => element.isFavourite).toList();
  }

  Product findItemById(String id) {
    return _items.firstWhere((element) => element.id == id);
  }

  Future<void> addProducts(String id, Product product) {
    final index = _items.indexWhere((element) => element.id == id);

    if (index >= 0) {
      final url = Uri.parse(
          'https://shopon-dc94c-default-rtdb.firebaseio.com/products/$id.json');
      return http
          .patch(url,
              body: json.encode({
                "title": product.title,
                "price": product.price,
                "description": product.description,
                "imageURL": product.imageURL,
              }))
          .then((value) {
        _items[index] = product;
        notifyListeners();
      }).catchError((error) {
        throw error;
      });
    } else {
      final url = Uri.parse(
          'https://shopon-dc94c-default-rtdb.firebaseio.com/products.json');
      return http
          .post(url,
              body: json.encode({
                "title": product.title,
                "price": product.price,
                "description": product.description,
                "imageURL": product.imageURL,
                "isFavourite": product.isFavourite,
              }))
          .then((value) {
        final newProd = Product(
          title: product.title,
          price: product.price,
          description: product.description,
          imageURL: product.imageURL,
          id: json.decode(
              value.body)["name"], // It is the unique id generated by firebase.
        );
        _items.add(newProd);

        notifyListeners(); // If we change data in this class, this will help us to communicate these changes to all the widgets.
      }).catchError((error) {
        throw error;
      }); // It creates another error to be used in other places.

      /* ........... This line of code is executed as soon as http request is generated. It does not wait for the response of the request.*/

    }
  }

  // Alternate approach using async and await keywords

  //   Future<void> addProducts(String id, Product product) async { // Async wraps the entire function in a future.

  //   final url = Uri.parse(
  //       'https://shopon-dc94c-default-rtdb.firebaseio.com/products.json');

  //   try{
  //   final response = await http // Using await, .then and .catchError are not required. It functions the same as .then
  //       .post(url,
  //           body: json.encode({
  //             "title": product.title,
  //             "price": product.price,
  //             "description": product.description,
  //             "imageURL": product.imageURL,
  //             "isFavourite": product.isFavourite,
  //           }))
  //     final index = _items.indexWhere((element) => element.id == id);
  //     final newProd = Product(
  //       title: product.title,
  //       price: product.price,
  //       description: product.description,
  //       imageURL: product.imageURL,
  //       id: json.decode(
  //           response.body)["name"], // It is the unique id generated by firebase.
  //     );
  //     if (index >= 0) {
  //       _items.remove(_items[index]);
  //       _items.insert(index, newProd);
  //     } else {
  //       _items.add(newProd);
  //     }
  //     notifyListeners();} catch(error){throw error;}

  Future<void> fetchAndSetProducts() async {
    final url = Uri.parse(
        'https://shopon-dc94c-default-rtdb.firebaseio.com/products.json');
    try {
      final response = await http.get(url);
      final extractedData = json.decode(response.body) as Map<String,
          dynamic>; // When we decode the fetched data, we get a nested map. We get a map which contain string ids as keys and maps as values. These maps then contain the actual data like description and price.
      final List<Product> loadedProducts = [];
      if (extractedData == null) {
        return;
      }
      extractedData.forEach((prodId /*key*/, prodData /*value*/) {
        loadedProducts.add(Product(
            id: prodId,
            title: prodData["title"],
            description: prodData["description"],
            price: prodData["price"],
            isFavourite: prodData["isFavourite"],
            imageURL: prodData["imageURL"]));
      });
      _items = loadedProducts;
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  Future<void> deleteProducts(String id) {
    final url = Uri.parse(
        'https://shopon-dc94c-default-rtdb.firebaseio.com/products/$id.json');
    return http.delete(url).then((value) {
      _items.removeWhere((element) => element.id == id);
      notifyListeners();
    });
  }
}
